// Helper functions for getting a set of random pokemon
import axios from 'axios';

const BASE_API = "https://pokeapi.co/api/v2/pokemon/";

/**
 * Returns a Set of `num` random ids with no duplicates in a range of 1-850.
 * The maximum number should eventually be the total different types of
 * Pokemon. Need to research this.
 * 
 * @param {Int} num
 * @returns {Set}
 */
const randId = (num) =>{
  let ids = new Set();
  while (num > 0) {
    let newId = Math.floor(Math.random() * 850);
    if (!ids.has(newId)) {
      ids.add(newId);
      num--;
    }
  }
  return ids;
}


/**
 * Takes in a Set generated by randId function, generates a pokemon
 * object for each id in the Set, and returns an array of objects.
 * 
 * @param {Set} ids
 */
const getPokemon = async (ids) => {
  let pokeArray = [];
  for (let id of ids) {
    try {
      let res = await axios.get(BASE_API + id + "/");
      let pokemon = {
        id: res.data.id,
        name: res.data.name,
        img: res.data.sprites.front_default,
        type: res.data.types[0].type.name,
        base_experience: res.data.base_experience,
      }
      pokeArray.push(pokemon);
    }
    catch (e) {
      console.log({msg: `No pokemon at ${id}`, error: e});
    }
  }
  return pokeArray;
};


/**
 * Takes in the Set used to generate the two hands of Pokemon. Generates a
 * single, as of yet unused id and uses it to make an API for one new
 * Pokemon. Updates the Set of used ids and returns a new Pokemon object.
 * 
 * This may have to return an object containing the modified set and the
 * pokemon object so that I can update state in App.js.
 * 
 * @param {Set} ids
 * @returns {Object}
 */
const onePokemon = async (ids) => {
  let newId = Math.floor(Math.random() * 850);

  while (ids.has(newId)) newId = Math.floor(Math.random() * 850);
  ids.add(newId);

  let res = await axios.get(BASE_API + newId + "/");
  let pokemon = {
    id: res.data.id,
    name: res.data.name,
    img: res.data.sprites.front_default,
    type: res.data.types[0].type.name,
    base_experience: res.data.base_experience,
  }

  return pokemon;
}


export { randId, getPokemon, onePokemon };
